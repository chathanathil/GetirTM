import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:getirtm/provider/auth.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
      GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get aboutPage_title => "Biz barada";
  String get addressPage_added => "Salgyňyz goşuldy";
  String get addressPage_default => "Esasy edip bellemek";
  String get addressPage_defaulted => "esasy";
  String get addressPage_delete => "Poz";
  String get addressPage_deleted => "Salgyňyz pozuldy";
  String get addressPage_empty => "Salgy tapylmady";
  String get addressPage_title => "Salgy";
  String get addressPage_updated => "Salgyňyz üýtgedildi";
  String get appName => "GetirTm";
  String get balance => "Balans";
  String get cartPage_continue => "Dowam et";
  String get cartPage_empty => "Sebediňizde haryt ýok";
  String get cartPage_title => "Sebet";
  String get checkoutPage_TaC => "Düzgünnama bilen doly tanyşdym";
  String get checkoutPage_additionalInfo => "Goşmaça maglumat";
  String get checkoutPage_address => "Salgy";
  String get checkoutPage_addressNotSelected => "Salgyny saýlamadyňyz";
  String get checkoutPage_addressSelect => "Salgyňyzy saýlaň";
  String get checkoutPage_cash => "Nagt";
  String get checkoutPage_close => "Ýap";
  String get checkoutPage_deliveryService => "Eltip berme hyzmaty";
  String get checkoutPage_error => "Ýalnyşlyk, täzeden barlap görüň";
  String get checkoutPage_online => "Onlaýn";
  String get checkoutPage_orderNow => "Sargamak";
  String get checkoutPage_payCash => "Harydy alanyňda nagt hasaplaşmak";
  String get checkoutPage_payOnline => "Kartdan onlaýn töleg etmek";
  String get checkoutPage_payType => "Töleg görnüşi";
  String get checkoutPage_productTotal => "Haryt jemi";
  String get checkoutPage_success => "Üstünlikli";
  String get checkoutPage_successMessage =>
      "Siziň sargydyňyz üstünlikli ýerine ýetirildi. Administrasiýa Siziň bilen tiz wagtdan habarlaşar";
  String get checkoutPage_title => "Barlag";
  String get checkoutPage_toPay => "Tölege degişli";
  String get checkoutPage_total => "Jemi";
  String get close => "Ýap";
  String get createAddressPage_address => "Salgy: Köçe, jaý, otag";
  String get createAddressPage_addressHint =>
      "meselem: 10 ýil Abadançylyk köçesi 444 jaý, otag 44";
  String get createAddressPage_create => "Goş";
  String get createAddressPage_createAddress => "Salgy goş";
  String get createAddressPage_editAddress => "Üýtgetmek";
  String get createAddressPage_regionNotSelected => "Raýony saýlamadyňyz";
  String get createAddressPage_required => "Boş bolmaly däl";
  String get createAddressPage_selectRegion => "Raýony saýlaň";
  String get createAddressPage_selectState => "Şäheri saýlaň";
  String get createAddressPage_stateNotSelected => "Şäheri saýlamadyňyz";
  String get createAddressPage_titleField => "Ady";
  String get createAddressPage_titleHint => "meselem: Öý salgysy";
  String get createAddressPage_update => "Ýatda sakla";
  String get discount_card => AuthProvider.appContent.discountCart['tm'] != null
      ? AuthProvider.appContent.discountCart['tm']
      : "Arzanladyş karty";
  String get discount_card_get_rule =>
      "«Getir tm» dürli görnüşli harytlar bilen bir hatarda, müşderilerine söwdalarynyň netijesinde bonuslary ýygnamaga hem mümkinçilik döredýär. Täze ulgamyň esasynda, müşderiler her satyn alan harytlaryndan belli mukdarda bal ýygnap bilýär. Hasapda ýygnalan ballar hasaplaşyk maksatly ulanylyp bilner. Şeýle hem müşderiler applikasiýada ýerleşdirilen maglumatnamany doldurmak arkaly bonus kartlaryna eýe bolup bilerler. Bu kartlar yzygiderli müşderiler üçin amatly teklip bolup durýar. ";
  String get discount_card_limit => "Kartyň belgisi 16 sandan ybarat bolýar";
  String get discount_card_number_invalid => "Kart belgiňiz nädogry";
  String get discount_card_order_success =>
      "Siziň «Getir tm» karty almak üçin eden sargydyňyz kabul edildi";
  String get earn_points => "Gazanÿan balyñyz";
  String get enter_discount_card_birthday => "Doglan wagty";
  String get enter_discount_card_name => "Ady";
  String get enter_discount_card_number => "Kart belgiňizi giriziň";
  String get enter_discount_card_phone => "Telefon belgi";
  String get enter_discount_card_surname => "Familýa";
  String get error => "Ýalňyşlyk";
  String get faqsPage_title => "Köp soralýan soraglar";
  String get favoritePage_empty =>
      "Harydy halanlaryňyza goşmak üçin, harydy açyp, ýokardaky sag ýürejik düwmesine basyp goşup bilersiňiz";
  String get favoritePage_title => "Halanlarym";
  String get get_discount_card => "Kart sarga";
  String get getir_point => "Bal Getir Tm";
  String get homePage_empty => "Bölüm tapylmady";
  String get homePage_title => "GetirTm";
  String get internetLost => "Internet ýok";
  String get invalid_field => "Dogry girizilmedi";
  String get langRu => "Rusça";
  String get langSettingPage_title => "Dili saýlaň";
  String get langTm => "Türkmençe";
  String get login_to_order => "Dowam etmek üçin agza boluň";
  String get no => AuthProvider.appContent.no['tm'] != null
      ? AuthProvider.appContent.no['tm']
      : "No";
  String get notFound => "Tapylmady";
  String get orderDetailsPage_address => "Salgy:";
  String get orderDetailsPage_cardHolder => "Kart eýesi:";
  String get orderDetailsPage_cardInfo => "Kart maglumatlary:";
  String get orderDetailsPage_cardNumber => "Kart belgisi:";
  String get orderDetailsPage_cashPay => "Nagt töleg";
  String get orderDetailsPage_expire => "Möhleti:";
  String get orderDetailsPage_onlinePay => "Onlaýn töleg";
  String get orderDetailsPage_products => "Harytlar";
  String get orderDetailsPage_title => "Giňişleýin";
  String get orderHistoryPage_empty => "Siziň hiç hili sargydyňyz ýok";
  String get orderHistoryPage_title => "Sargytlar";
  String get pay_with_terminal_text => "Harydy alanyňda terminaldan tölemek";
  String get paymentPage_cancel => "Sahypany ýap";
  String get paymentPage_loading => "Ýüklenýär...";
  String get paymentPage_pay => "Töleg etmek";
  String get paymentPage_title => "Töleg etmek";
  String get paymentPage_warning => "Duýduryş";
  String get paymentPage_warningMessage =>
      "Eger bu sahypany ýapsaňyz, Siziň tölegiňiz amala aşyrylmaz";
  String get point => "bal";
  String get point_plural => "bal";
  String get productDetailsPage_addToBasket => "Sebede goş";
  String get productDetailsPage_content => "Haryt barada";
  String get productDetailsPage_details => "Giňişleýin";
  String get productDetailsPage_title => "";
  String get productsPage_title => "Harytlar";
  String get profilePage_about => AuthProvider.appContent.about['tm'] != null
      ? AuthProvider.appContent.about['tm']
      : "About";
  String get profilePage_address =>
      AuthProvider.appContent.myAddresses['tm'] != null
          ? AuthProvider.appContent.myAddresses['tm']
          : "Salgylar";
  String get profilePage_favorites => "Halanlarym";
  String get profilePage_help => "Kömek";
  String get profilePage_lang => "Dil";
  String get profilePage_login => AuthProvider.appContent.login['tm'] != null
      ? AuthProvider.appContent.login['tm']
      : "Login";
  String get profilePage_logout => AuthProvider.appContent.logout['tm'] != null
      ? AuthProvider.appContent.logout['tm']
      : "Logout";
  String get profilePage_orders =>
      AuthProvider.appContent.myOrders['tm'] != null
          ? AuthProvider.appContent.myOrders['tm']
          : "MyOrders";
  String get profilePage_title =>
      AuthProvider.appContent.myProfile['tm'] != null
          ? AuthProvider.appContent.myProfile['tm']
          : "Profilim";
  String get profilePage_unknown => "Näbelli";
  String get profilePage_version =>
      AuthProvider.appContent.version['tm'] != null
          ? AuthProvider.appContent.version['tm']
          : "Version";
  String get register => "Içeri gir";
  String get registerToContinue => "Dowam etmek üçin içeri giriň";
  String get repeat_order => "Sargydy gaýtalamak";
  String get repeat_order_content =>
      "Sebediňizdäki harytlar pozulyp, ýokardaky harytlar goşular. Dowam etmek isleýäňizmi?";
  String get repeat_order_message => "Sargydyňyz sebede goşuldy";
  String get searchPage_notFound => "Hiç hili haryt tapylmady";
  String get searchPage_placeholder => "Gözleg";
  String get searchPage_popularSearch => "Köp gözlenýän harytlar";
  String get searchPage_searchResult => "Gözleg netijesi";
  String get searchPage_title => "Gözleg";
  String get status_canceled => "Goýbolsun edildi";
  String get status_completed => "Tamamlandy";
  String get status_new => "Täze";
  String get status_pay => "Tölenmedik";
  String get status_pending => "Ýerine ýetirilýär";
  String get symbol => "m.";
  String get terminal => "Terminal";
  String get termsPage_title => "Düzgünnama";
  String get update => "Täzele";
  String get use_points => "Ballary ulanmak";
  String get used_points => "Ulanylan bal";
  String get verify => "Tassykla";
  String get verifyPage_codeField => "Kod";
  String get verifyPage_codeInvalid => "Kod nädogry";
  String get verifyPage_phoneField => "Telefon";
  String get verifyPage_phoneInvalid => "Telefon belgisi nädogry";
  String get verifyPage_resendCode => "Kody täzeden ugratmak";
  String get verifyPage_sendCode => "Kody ugratmak";
  String get verifyPage_title => "Ulanyjy logini";
  String get verifyPage_verify => "Tassyklamak";
  String get warning => "Duýduryş";
  String get yes => AuthProvider.appContent.yes['tm'] != null
      ? AuthProvider.appContent.yes['tm']
      : "Yes";
  String get profilePage_terms => AuthProvider.appContent.terms['tm'] != null
      ? AuthProvider.appContent.terms['tm']
      : "Terms";
  String get profilePage_privacy =>
      AuthProvider.appContent.privacy['tm'] != null
          ? AuthProvider.appContent.privacy['tm']
          : "Privacy";
  String get profilePage_contact =>
      AuthProvider.appContent.contact['tm'] != null
          ? AuthProvider.appContent.contact['tm']
          : "Contact";
  String get profilePage_feedback =>
      AuthProvider.appContent.feedback['tm'] != null
          ? AuthProvider.appContent.feedback['tm']
          : "Feedback";
  String get profilePage_faq => AuthProvider.appContent.faq['tm'] != null
      ? AuthProvider.appContent.faq['tm']
      : "Faq";
  String get profilePage_favourites =>
      AuthProvider.appContent.favourites['tm'] != null
          ? AuthProvider.appContent.favourites['tm']
          : "Favourites";
  String get profilePage_language =>
      AuthProvider.appContent.language['tm'] != null
          ? AuthProvider.appContent.language['tm']
          : "Language";
  String get call_customer_service =>
      AuthProvider.appContent.callCustomerService['tm'] != null
          ? AuthProvider.appContent.callCustomerService['tm']
          : "Call customer service?";
  String verifyPage_resendCodeIn(String seconds) =>
      "Kody $seconds sekuntdan täzeden ugratmak";
}

class $ru extends S {
  const $ru();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get profilePage_login => AuthProvider.appContent.login['ru'] != null
      ? AuthProvider.appContent.login['ru']
      : "Войти";
  @override
  String get langRu => "Русский";
  @override
  String get orderDetailsPage_products => "Все товары";
  @override
  String get productDetailsPage_content => "Содержимое";
  @override
  String get checkoutPage_payOnline => "Оплатить картой онлайн";
  @override
  String get getir_point => "Баллы Getir Tm";
  @override
  String get earn_points => "Вы заработаете";
  @override
  String get balance => "Баланс";
  @override
  String get checkoutPage_close => "Закрыть";
  @override
  String get status_pay => "Неоплаченный";
  @override
  String get cartPage_continue => "Продолжить";
  @override
  String get profilePage_help => "Помощь";
  @override
  String get verifyPage_verify => "Подтвердить";
  @override
  String get status_new => "Новый";
  @override
  String get favoritePage_empty =>
      "Чтобы добавить товар в избранные, откройте товар, нажмите сердечко в верхнем правом углу";
  @override
  String get repeat_order => "Повторить заказ";
  @override
  String get checkoutPage_addressSelect => "Выберите адрес";
  @override
  String get createAddressPage_titleField => "Название:";
  @override
  String get addressPage_updated => "Адрес изменен";
  @override
  String get homePage_empty => "Категория не найдена";
  @override
  String get addressPage_defaulted => "по умолчанию";
  @override
  String get termsPage_title => "Пользовательское соглашение";
  @override
  String get paymentPage_cancel => "Закрыть страницу";
  @override
  String get registerToContinue => "Зарегистрируйтесь для продолжения";
  @override
  String get paymentPage_title => "Оплатить";
  @override
  String get verifyPage_title => "Логин пользователя";
  @override
  String get homePage_title => "GetirTm";
  @override
  String get profilePage_unknown => "Неизвестный";
  @override
  String get checkoutPage_deliveryService => "Доставка";
  @override
  String get addressPage_delete => "Удалить";
  @override
  String get point_plural => "баллов";
  @override
  String get repeat_order_message => "Ваш заказ добавлен в корзину";
  @override
  String get enter_discount_card_phone => "Номер телефона";
  @override
  String get verifyPage_resendCode => "Переотправить код";
  @override
  String get discount_card => AuthProvider.appContent.discountCart['ru'] != null
      ? AuthProvider.appContent.discountCart['ru']
      : "Дисконтная карта";
  @override
  String get login_to_order => "Зарегистрируйтесь, чтобы продолжить";
  @override
  String get checkoutPage_online => "Онлайн";
  @override
  String get checkoutPage_toPay => "Оплата";
  @override
  String get createAddressPage_update => "Запомнить";
  @override
  String get checkoutPage_total => "Итого";
  @override
  String get searchPage_searchResult => "Результат поиска";
  @override
  String get productDetailsPage_addToBasket => "Добавить в корзину";
  @override
  String get productDetailsPage_details => "Подробнее";
  @override
  String get status_pending => "Выполняется";
  @override
  String get verify => "Подтвердить";
  @override
  String get productDetailsPage_title => "";
  @override
  String get checkoutPage_success => "Успешно";
  @override
  String get createAddressPage_regionNotSelected => "Район не выбран";
  @override
  String get close => "Закрыть";
  @override
  String get discount_card_order_success =>
      "Ваш заказ для получения карты «Getir tm» принят!";
  @override
  String get profilePage_orders => "Заказы";
  @override
  String get paymentPage_pay => "Выполнить оплату";
  @override
  String get orderDetailsPage_cardInfo => "Информация о карте:";
  @override
  String get searchPage_title => "Поиск";
  @override
  String get enter_discount_card_number => "Ведите номер карты";
  @override
  String get checkoutPage_error => "Произошла ошибка, попробуйте снова";
  @override
  String get checkoutPage_address => "Адрес";
  @override
  String get favoritePage_title => "Избранные";
  @override
  String get checkoutPage_orderNow => "Заказать";
  @override
  String get internetLost => "Соединение потеряно";
  @override
  String get paymentPage_loading => "Загрузка";
  @override
  String get enter_discount_card_name => "Имя";
  @override
  String get register => "Зарегистрироваться";
  @override
  String get profilePage_title =>
      AuthProvider.appContent.myProfile['ru'] != null
          ? AuthProvider.appContent.myProfile['ru']
          : "Мой профиль";
  @override
  String get symbol => "м.";
  @override
  String get orderHistoryPage_title => "Заказы";
  @override
  String get createAddressPage_create => "Добавить";
  @override
  String get checkoutPage_payCash => "Оплатить наличными при получении";
  @override
  String get discount_card_get_rule =>
      "Накопительная система баллов. \n«Getir tm» предлагает покупателям не только большой выбор товаров, но и выгодную бонусную накопительную систему. Благодаря новой системе, покупатели могут покупать продукты через приложение и накапливать за покупки баллы, которые в дальнейшем могут использовать при осуществлении оплаты заказа. Покупатели могут получить бонусную карту просто заполнив анкету в приложении. Это выгодное предложение для постоянных клиентов.";
  @override
  String get status_canceled => "Отменен";
  @override
  String get checkoutPage_payType => "Способ оплаты";
  @override
  String get verifyPage_sendCode => "Отправить код";
  @override
  String get discount_card_limit => "Номер карты состоит из 16 цифр";
  @override
  String get cartPage_empty => "Нет товаров в корзине";
  @override
  String get addressPage_empty => "Адрес не найден";
  @override
  String get enter_discount_card_surname => "Фамилия";
  @override
  String get get_discount_card => "Получить карту";
  @override
  String get createAddressPage_titleHint => "например: Домашний адрес";
  @override
  String get faqsPage_title => "Часто задаваемые вопросы";
  @override
  String get searchPage_popularSearch => "Часто ищут";
  @override
  String get verifyPage_phoneInvalid => "Номер телефона недействителен";
  @override
  String get warning => "Предупреждение";
  @override
  String get createAddressPage_addressHint =>
      "например: улица 10 йыл Абаданчылык, дом 444, квартира 44";
  @override
  String get addressPage_added => "Адрес добавлен";
  @override
  String get use_points => "Использовать баллы";
  @override
  String get productsPage_title => "Товары";
  @override
  String get orderDetailsPage_cardHolder => "Владелец карты:";
  @override
  String get checkoutPage_addressNotSelected => "Адрес не выбран";
  @override
  String get createAddressPage_createAddress => "Добавить адрес";
  @override
  String get profilePage_lang => "Язык";
  @override
  String get orderDetailsPage_cardNumber => "Номер карты:";
  @override
  String get checkoutPage_title => "Проверка";
  @override
  String get verifyPage_codeField => "Код";
  @override
  String get langSettingPage_title => "Выберите язык";
  @override
  String get addressPage_title => "Адрес";
  @override
  String get profilePage_version =>
      AuthProvider.appContent.version['ru'] != null
          ? AuthProvider.appContent.version['ru']
          : "Версия";
  @override
  String get aboutPage_title => "О Нас";
  @override
  String get orderDetailsPage_address => "Адрес:";
  @override
  String get createAddressPage_editAddress => "Редактировать";
  @override
  String get createAddressPage_selectRegion => "Выберите район";

  @override
  String get no => AuthProvider.appContent.no['ru'] != null
      ? AuthProvider.appContent.no['ru']
      : "No";
  @override
  String get checkoutPage_TaC => "Я ознакомился с Правилами";
  @override
  String get profilePage_about => AuthProvider.appContent.about['ru'] != null
      ? AuthProvider.appContent.about['ru']
      : "About";
  @override
  String get checkoutPage_cash => "Наличные";
  @override
  String get orderDetailsPage_cashPay => "Оплата наличными";
  @override
  String get update => "Обновить";
  @override
  String get error => "Ошибка";
  @override
  String get orderDetailsPage_onlinePay => "Онлайн оплата";
  @override
  String get orderDetailsPage_expire => "Срок действия:";
  @override
  String get searchPage_placeholder => "Поиск";
  @override
  String get checkoutPage_successMessage =>
      "Ваш заказ успешно оформлен. Спасибо за покупку. Наш менеджер свяжется с Вами по телефону или e-mail для согласования адреса и время доставки.";
  @override
  String get point => "балл";
  @override
  String get searchPage_notFound => "Ничего не найдено";
  @override
  String get cartPage_title => "Корзина";
  @override
  String get orderDetailsPage_title => "Подробнее";
  @override
  String get langTm => "Туркменский";
  @override
  String get paymentPage_warning => "Предупреждение";
  @override
  String get paymentPage_warningMessage =>
      "Если Вы выйдите с этой страницы, то Ваш платеж не будет завершен!";
  @override
  String get checkoutPage_productTotal => "Все товары";
  @override
  String get status_completed => "Завершено";
  @override
  String get invalid_field => "Поле заполнено некорректно";
  @override
  String get discount_card_number_invalid => "Номер карты недействителен";
  @override
  String get pay_with_terminal_text => "Оплатить через терминал при получении";
  @override
  String get createAddressPage_stateNotSelected => "Город не выбран";
  @override
  String get addressPage_default => "Сделать по умолчанию";
  @override
  String get verifyPage_codeInvalid => "Код недействителен";
  @override
  String get appName => "GetirTm";

  @override
  String get yes => AuthProvider.appContent.yes['ru'] != null
      ? AuthProvider.appContent.yes['ru']
      : "Yes";
  @override
  String get addressPage_deleted => "Адрес удален";
  @override
  String get profilePage_address =>
      AuthProvider.appContent.myAddresses['ru'] != null
          ? AuthProvider.appContent.myAddresses['ru']
          : "Адреса";
  @override
  String get terminal => "Терминал";
  @override
  String get used_points => "Потрачено баллов";
  @override
  String get profilePage_favorites => "Избранные";
  @override
  String get createAddressPage_required => "Поле не должно быть пустым";
  @override
  String get verifyPage_phoneField => "Телефон";
  @override
  String get notFound => "Не найдено";
  @override
  String get profilePage_logout => AuthProvider.appContent.logout['ru'] != null
      ? AuthProvider.appContent.logout['ru']
      : "Logout";
  @override
  String get enter_discount_card_birthday => "Дата рождения";
  @override
  String get createAddressPage_selectState => "Выберите город";
  @override
  String get checkoutPage_additionalInfo => "Дополнительная информация";
  @override
  String get createAddressPage_address => "Адрес: Улица, дом, квартира";
  @override
  String get orderHistoryPage_empty => "У Вас нет никаких заказов";
  @override
  String get profilePage_contact =>
      AuthProvider.appContent.contact['ru'] != null
          ? AuthProvider.appContent.contact['ru']
          : "Contact";
  @override
  String get profilePage_faq => AuthProvider.appContent.faq['ru'] != null
      ? AuthProvider.appContent.faq['ru']
      : "Faq";
  @override
  String get profilePage_favourites =>
      AuthProvider.appContent.favourites['ru'] != null
          ? AuthProvider.appContent.favourites['ru']
          : "Favourites";
  @override
  String get profilePage_feedback =>
      AuthProvider.appContent.feedback['ru'] != null
          ? AuthProvider.appContent.feedback['ru']
          : "Feedback";
  @override
  String get profilePage_language =>
      AuthProvider.appContent.language['ru'] != null
          ? AuthProvider.appContent.language['ru']
          : "Language";
  @override
  String get profilePage_privacy =>
      AuthProvider.appContent.privacy['ru'] != null
          ? AuthProvider.appContent.privacy['ru']
          : "Privacy";
  @override
  String get profilePage_terms => AuthProvider.appContent.terms['ru'] != null
      ? AuthProvider.appContent.terms['ru']
      : "Terms";
  @override
  String get call_customer_service =>
      AuthProvider.appContent.callCustomerService['ru'] != null
          ? AuthProvider.appContent.terms['ru']
          : "Call customer service?";
  @override
  String get repeat_order_content =>
      "Товары в Вашей корзине будут удалены, и добавлены вышеуказанные товары. Хотите продолжить?";
  @override
  String verifyPage_resendCodeIn(String seconds) =>
      "Переотправить через $seconds секунд";
}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("ru", ""),
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution(
      {Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution(
      {Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "ru":
          S.current = const $ru();
          return SynchronousFuture<S>(S.current);
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        default:
        // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported,
      bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry &&
            (supportedLocale.countryCode == null ||
                supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
    ? null
    : l.countryCode != null && l.countryCode.isEmpty
        ? l.languageCode
        : l.toString();
